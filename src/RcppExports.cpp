// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

// sgd
Rcpp::List sgd(const Eigen::MatrixXd& X, const Eigen::VectorXd& y, int K, int minibatch_size);
RcppExport SEXP fm_sgd(SEXP XSEXP, SEXP ySEXP, SEXP KSEXP, SEXP minibatch_sizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type y(ySEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< int >::type minibatch_size(minibatch_sizeSEXP);
    rcpp_result_gen = Rcpp::wrap(sgd(X, y, K, minibatch_size));
    return rcpp_result_gen;
END_RCPP
}
// rcppeigen_hello_world
Eigen::MatrixXd rcppeigen_hello_world();
RcppExport SEXP fm_rcppeigen_hello_world() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(rcppeigen_hello_world());
    return rcpp_result_gen;
END_RCPP
}
// rcppeigen_outerproduct
Eigen::MatrixXd rcppeigen_outerproduct(const Eigen::VectorXd& x);
RcppExport SEXP fm_rcppeigen_outerproduct(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(rcppeigen_outerproduct(x));
    return rcpp_result_gen;
END_RCPP
}
// rcppeigen_innerproduct
double rcppeigen_innerproduct(const Eigen::VectorXd& x);
RcppExport SEXP fm_rcppeigen_innerproduct(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(rcppeigen_innerproduct(x));
    return rcpp_result_gen;
END_RCPP
}
// rcppeigen_bothproducts
Rcpp::List rcppeigen_bothproducts(const Eigen::VectorXd& x);
RcppExport SEXP fm_rcppeigen_bothproducts(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(rcppeigen_bothproducts(x));
    return rcpp_result_gen;
END_RCPP
}
// main
int main();
RcppExport SEXP fm_main() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(main());
    return rcpp_result_gen;
END_RCPP
}
// sp3
float sp3(float beta0, Eigen::VectorXd& beta, Eigen::MatrixXd& v, const Eigen::VectorXd& values, const Eigen::VectorXi& rows, const Eigen::VectorXi& cols, const Eigen::VectorXd& y, int nrow, int ncol);
RcppExport SEXP fm_sp3(SEXP beta0SEXP, SEXP betaSEXP, SEXP vSEXP, SEXP valuesSEXP, SEXP rowsSEXP, SEXP colsSEXP, SEXP ySEXP, SEXP nrowSEXP, SEXP ncolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< float >::type beta0(beta0SEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd& >::type v(vSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type values(valuesSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXi& >::type rows(rowsSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXi& >::type cols(colsSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type y(ySEXP);
    Rcpp::traits::input_parameter< int >::type nrow(nrowSEXP);
    Rcpp::traits::input_parameter< int >::type ncol(ncolSEXP);
    rcpp_result_gen = Rcpp::wrap(sp3(beta0, beta, v, values, rows, cols, y, nrow, ncol));
    return rcpp_result_gen;
END_RCPP
}
// sp2
int sp2(int row, float beta0, const Eigen::VectorXd& beta, const Eigen::MatrixXd& v, const Eigen::VectorXd& values, const Eigen::VectorXi& rows, const Eigen::VectorXi& cols, int nrow, int ncol);
RcppExport SEXP fm_sp2(SEXP rowSEXP, SEXP beta0SEXP, SEXP betaSEXP, SEXP vSEXP, SEXP valuesSEXP, SEXP rowsSEXP, SEXP colsSEXP, SEXP nrowSEXP, SEXP ncolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type row(rowSEXP);
    Rcpp::traits::input_parameter< float >::type beta0(beta0SEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type v(vSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type values(valuesSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXi& >::type rows(rowsSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXi& >::type cols(colsSEXP);
    Rcpp::traits::input_parameter< int >::type nrow(nrowSEXP);
    Rcpp::traits::input_parameter< int >::type ncol(ncolSEXP);
    rcpp_result_gen = Rcpp::wrap(sp2(row, beta0, beta, v, values, rows, cols, nrow, ncol));
    return rcpp_result_gen;
END_RCPP
}
// sp1
int sp1(const Eigen::VectorXd& values, const Eigen::VectorXi& rows, const Eigen::VectorXi& cols, int nrow, int ncol);
RcppExport SEXP fm_sp1(SEXP valuesSEXP, SEXP rowsSEXP, SEXP colsSEXP, SEXP nrowSEXP, SEXP ncolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type values(valuesSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXi& >::type rows(rowsSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXi& >::type cols(colsSEXP);
    Rcpp::traits::input_parameter< int >::type nrow(nrowSEXP);
    Rcpp::traits::input_parameter< int >::type ncol(ncolSEXP);
    rcpp_result_gen = Rcpp::wrap(sp1(values, rows, cols, nrow, ncol));
    return rcpp_result_gen;
END_RCPP
}
